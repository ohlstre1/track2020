/* Author: Tommi Junttila, Aalto University.
 * Only for the use on the Aalto course CS-A1140.
 * Redistribution not allowed.
 */

package escape

object solver {
  /**
   * Find a shortest-duration way from the world.startPosition to
   * a safe position in the world and return the path in form of
   * a sequence of (row,column) coordinates.
   * You can use the World.neighbours method for finding the valid
   * neighbour coordinates of a coordinate.
   */
  def solve(world: World): Seq[(Int, Int)] = {
    val seen = Array.fill[Boolean](world.nofRows, world.nofColumns)(false)
    val q = scala.collection.mutable.PriorityQueue[((Int, Int), Int)]()(Ordering.by(-_._2))
    var pred = scala.collection.mutable.HashMap[(Int, Int), (Int, Int)]()
    var dur = Array.fill[Int](world.nofRows, world.nofColumns)(Integer.MAX_VALUE)
    var seq = Seq[(Int, Int)]()
 
    q.enqueue((world.startPosition, 0))
    dur(world.startPosition._1)(world.startPosition._2) = 0
    var stop = false
    
      //ignore if seen
      if(!seen(q.dequeue._1._1)(q.dequeue._1._2)){
        //stop loop if safe found
        if(world.apply(q.dequeue._1).duration == 0 && q.dequeue._1 != world.startPosition){
          seq = seq.+:(q.dequeue._1)
          stop = true
        //else continue
        }else{
          seen(q.dequeue._1._1)(q.dequeue._1._2) = true 
          for(n <- world.neighbours(q.dequeue._1)){
            //if q.dequeue finds faster way to some neighbour update as better alternative and add to queue
            if(dur(n._1)(n._2) > dur(q.dequeue._1._1)(q.dequeue._1._2) + world.apply(n).duration){
              dur(n._1)(n._2) = dur(q.dequeue._1._1)(q.dequeue._1._2) + world.apply(n).duration
              pred(n) = q.dequeue._1
              q.enqueue((n, dur(n._1)(n._2)))
            }
          }
        }
      }
   
    while(!stop){
     
      //ignore if seen
      if(!seen(q.dequeue._1._1)(q.dequeue._1._2)){
        //stop loop if safe found
        if(world.apply(q.dequeue._1).duration == 0 && q.dequeue._1 != world.startPosition){
          seq = seq.+:(q.dequeue._1)
          stop = true
        //else continue
        }else{
          seen(q.dequeue._1._1)(q.dequeue._1._2) = true 
          for(n <- world.neighbours(q.dequeue._1)){
            //if q.dequeue finds faster way to some neighbour update as better alternative and add to queue
            if(dur(n._1)(n._2) > dur(q.dequeue._1._1)(q.dequeue._1._2) + world.apply(n).duration){
              dur(n._1)(n._2) = dur(q.dequeue._1._1)(q.dequeue._1._2) + world.apply(n).duration
              pred(n) = q.dequeue._1
              q.enqueue((n, dur(n._1)(n._2)))
            }
          }
        }
      }
    }
 
    while(world.startPosition != seq.head){
      seq = seq.+:(pred(seq.head))
    }
 
    seq
  }

}
